{"version":3,"file":"static/js/111.6c7a595d.chunk.js","mappings":"qTAWaA,GAJQC,EAAAA,GAAAA,GAAH,+CACC,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAApB,KAGAH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,yMAIR,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAApB,IACG,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAApB,IACK,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAApB,IAEE,SAAAF,GAAC,OAAIA,EAAEC,MAAMG,OAAOC,KAAnB,IACJ,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,MAAMC,EAAlB,KAGPC,EAAQT,EAAAA,GAAAA,MAAH,kFAGT,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAApB,IAGGO,GAAQV,EAAAA,EAAAA,IAAOW,EAAAA,GAAPX,CAAH,0FAGC,SAAAC,GAAC,OAAIA,EAAEC,MAAMK,MAAMK,EAAlB,IACD,SAAAX,GAAC,OAAIA,EAAEC,MAAMG,OAAOQ,IAAnB,IAGPC,GAAed,EAAAA,EAAAA,IAAOe,EAAAA,GAAPf,CAAH,2DACd,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,OAAOW,GAAnB,IAICC,EAASjB,EAAAA,GAAAA,OAAH,2PAGN,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAApB,IAA0B,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAApB,IAEtB,SAAAF,GAAC,OAAIA,EAAEC,MAAMK,MAAMC,EAAlB,IAGJ,SAAAP,GAAC,OAAIA,EAAEC,MAAMgB,WAAW,QAAvB,IACX,SAAAjB,GAAC,OAAIA,EAAEC,MAAMgB,WAAW,mBAAvB,IAIiB,SAAAjB,GAAC,OAAIA,EAAEC,MAAMG,OAAOQ,IAAnB,IACZ,SAAAZ,GAAC,OAAIA,EAAEC,MAAMG,OAAOc,KAAnB,G,6ICzCRC,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,KAAaE,QAAQC,SAAS,YACrCC,SAAUJ,EAAAA,KAAaK,IAAI,EAAG,qBAAqBF,SAAS,cAGjDG,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OACE,SAAC,KAAD,CACEC,cAAe,CAAEP,MAAO,GAAIE,SAAU,IACtCM,SAfiB,SAACC,EAAQC,GAC5BL,GAASM,EAAAA,EAAAA,IAAMF,IACZG,SACAC,MAAK,WACJH,EAAQI,YACRC,EAAAA,GAAAA,QAAc,uBACf,IACAC,OAAM,SAAAC,GACLF,EAAAA,GAAAA,MAAA,iBAAsBE,GACvB,GACJ,EAMGC,iBAAkBrB,EAHpB,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,oBAEE,SAAC,KAAD,CAAOsB,KAAK,QAAQC,KAAK,WACzB,SAAC,KAAD,CAAcA,KAAK,QAAQC,UAAU,aAEvC,UAAC,KAAD,uBAEE,SAAC,KAAD,CAAOF,KAAK,WAAWC,KAAK,cAC5B,SAAC,KAAD,CAAcA,KAAK,WAAWC,UAAU,aAE1C,SAAC,KAAD,CAAQF,KAAK,SAAb,uBAIP,EC7CD,EARc,WACZ,OACE,0BACE,SAACf,EAAD,KAGL,C","sources":["components/ContactForm/ContactForm.styled.js","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikError,\n} from 'formik';\nimport styled from 'styled-components';\n\nexport const Title = styled.h2`\n  margin-bottom: ${p => p.theme.spacing(5)};\n`;\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: ${p => p.theme.spacing(5)};\n  padding: ${p => p.theme.spacing(3)};\n  margin-bottom: ${p => p.theme.spacing(5)};\n\n  border: 1px solid ${p => p.theme.colors.black};\n  border-radius: ${p => p.theme.radii.md};\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.spacing(1)};\n`;\n\nexport const Field = styled(FormikField)`\n  font: inherit;\n\n  border-radius: ${p => p.theme.radii.sm};\n  outline-color: ${p => p.theme.colors.blue};\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  color: ${p => p.theme.colors.red};\n  font-size: 16px;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  margin: 0 auto;\n  padding: ${p => p.theme.spacing(1)} ${p => p.theme.spacing(3)};\n\n  border-radius: ${p => p.theme.radii.md};\n  background-color: transparent;\n\n  transition: ${p => p.theme.transition('color')},\n    ${p => p.theme.transition('background-color')};\n\n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.colors.blue};\n    color: ${p => p.theme.colors.white};\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport toast from 'react-hot-toast';\nimport { logIn } from 'redux/auth/operations';\n\nimport {\n  Button,\n  ErrorMessage,\n  Field,\n  Form,\n  Label,\n} from 'components/ContactForm/ContactForm.styled';\n\nconst loginSchema = Yup.object().shape({\n  email: Yup.string().email().required('Required'),\n  password: Yup.string().min(7, 'Must be 7 or more').required('Required'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    dispatch(logIn(values))\n      .unwrap()\n      .then(() => {\n        actions.resetForm();\n        toast.success('Successfully logined');\n      })\n      .catch(error => {\n        toast.error(`Oops.. ${error}`);\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={loginSchema}\n    >\n      <Form>\n        <Label>\n          Email\n          <Field type=\"email\" name=\"email\" />\n          <ErrorMessage name=\"email\" component=\"span\" />\n        </Label>\n        <Label>\n          Password\n          <Field type=\"password\" name=\"password\" />\n          <ErrorMessage name=\"password\" component=\"span\" />\n        </Label>\n        <Button type=\"submit\">Login</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return (\n    <div>\n      <LoginForm />\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":["Form","styled","p","theme","spacing","FormikForm","colors","black","radii","md","Label","Field","FormikField","sm","blue","ErrorMessage","FormikError","red","Button","transition","white","loginSchema","Yup","shape","email","required","password","min","LoginForm","dispatch","useDispatch","initialValues","onSubmit","values","actions","logIn","unwrap","then","resetForm","toast","catch","error","validationSchema","type","name","component"],"sourceRoot":""}